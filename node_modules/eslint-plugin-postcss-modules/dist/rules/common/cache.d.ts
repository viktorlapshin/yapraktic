import { Rule } from "eslint";
import * as ESTree from "estree";
import { ParseResult } from "../../types";
export declare const nodeIsImportDeclaration: (node: ESTree.Node) => node is ESTree.ImportDeclaration;
export declare const nodeIsImportSpecifier: (node: ESTree.Node) => node is ESTree.ImportSpecifier;
export declare const nodeIsImportDefaultSpecifier: (node: ESTree.Node) => node is ESTree.ImportDefaultSpecifier;
export declare const nodeIsImportNamespaceSpecifier: (node: ESTree.Node) => node is ESTree.ImportNamespaceSpecifier;
export declare const nodeIsMemberExpression: (node: ESTree.Node) => node is ESTree.MemberExpression;
export interface BaseFilenameToParseResult {
    [key: string]: ParseResult;
}
export interface SpecifierToClasses {
    [key: string]: {
        filename: string;
        classes: ReadonlyMap<string, string[]>;
    };
}
export interface ProcessedImportDeclaration extends ParseResult {
    node: ESTree.ImportDeclaration;
    filename: string;
    specifier: string | null;
    explicitImports: ESTree.ImportSpecifier[];
}
export interface ProcessedMemberExpression {
    node: ESTree.MemberExpression;
    filename: string;
    className: string;
    classes: ReadonlyMap<string, string[]>;
}
export declare class Cache {
    private static filenameToParseResult;
    private specifierToClasses;
    private settings;
    private parser;
    constructor(context: Rule.RuleContext);
    static clear(): void;
    processImportDeclaration(node: ESTree.Node): ProcessedImportDeclaration | null;
    processMemberExpression(node: ESTree.Node): ProcessedMemberExpression | null;
}
