"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const matchImports = /^(.+?|\([\s\S]+?\))\s+from\s+("[^"]*"|'[^']*'|[\w-]+)$/;
const matchValueDefinition = /(?:\s+|^)([\w-]+):?\s+(.+?)\s*$/g;
const matchImport = /^([\w-]+)(?:\s+as\s+([\w-]+))?/;
const matchValueName = /[$]?[\w-]+/g;
const plugin = () => ({
    postcssPlugin: "used-values",
    Once(css, { result }) {
        const definitions = new Map();
        const addDefinition = (atRule) => {
            let matches;
            while ((matches = matchValueDefinition.exec(atRule.params))) {
                definitions.set(matches[1], atRule);
            }
        };
        const addImport = (atRule) => {
            const matches = matchImports.exec(atRule.params);
            if (matches) {
                matches[1]
                    .replace(/^\(\s*([\s\S]+)\s*\)$/, "$1")
                    .split(/\s*,\s*/)
                    .forEach((alias) => {
                    const tokens = matchImport.exec(alias);
                    if (tokens) {
                        const [, theirName, myName = theirName] = tokens;
                        definitions.set(myName, atRule);
                    }
                });
            }
        };
        css.walkAtRules("value", (atRule) => {
            if (matchImports.exec(atRule.params)) {
                addImport(atRule);
            }
            else {
                addDefinition(atRule);
            }
        });
        if (definitions.size === 0) {
            return;
        }
        const usedValues = new Set();
        const findUsedValues = (s, node) => {
            let matches;
            while ((matches = matchValueName.exec(s))) {
                const definingNode = definitions.get(matches[0]);
                if (definingNode && definingNode !== node) {
                    usedValues.add(matches[0]);
                }
            }
        };
        css.walk((node) => {
            if (node.type === "decl" && node.value) {
                findUsedValues(node.value.toString());
            }
            else if (node.type === "rule" && node.selector) {
                findUsedValues(node.selector.toString());
            }
            else if (node.type === "atrule" && node.params) {
                findUsedValues(node.params.toString(), node);
            }
        });
        if (usedValues.size > 0) {
            result.messages.push({
                type: "used-values",
                plugin: "used-values",
                usedValues: Array.from(usedValues),
            });
        }
    },
});
plugin.postcss = true;
exports.default = plugin;
