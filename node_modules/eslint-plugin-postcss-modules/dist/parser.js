"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const fs_1 = tslib_1.__importDefault(require("fs"));
const postcss_1 = tslib_1.__importDefault(require("postcss"));
const postcss_load_config_1 = tslib_1.__importDefault(require("postcss-load-config"));
const postcss_modules_values_1 = tslib_1.__importDefault(require("postcss-modules-values"));
const postcss_modules_local_by_default_1 = tslib_1.__importDefault(require("postcss-modules-local-by-default"));
const postcss_modules_extract_imports_1 = tslib_1.__importDefault(require("postcss-modules-extract-imports"));
const postcss_modules_scope_1 = tslib_1.__importDefault(require("postcss-modules-scope"));
const icss_utils_1 = require("icss-utils");
const camelcase_1 = tslib_1.__importDefault(require("camelcase"));
const sync_1 = tslib_1.__importDefault(require("./sync"));
const used_values_1 = tslib_1.__importDefault(require("./plugins/used-values"));
const used_keyframes_1 = tslib_1.__importDefault(require("./plugins/used-keyframes"));
class Parser {
    constructor(settings) {
        this.settings = settings;
        this.syncOk = true;
        const { plugins, options } = this.loadConfig();
        this.processor = postcss_1.default(plugins);
        this.postcssOptions = options;
        this.processor
            .use(used_values_1.default())
            .use(postcss_modules_values_1.default())
            .use(postcss_modules_local_by_default_1.default({ mode: this.settings.defaultScope }))
            .use(postcss_modules_extract_imports_1.default())
            .use(postcss_modules_scope_1.default({
            generateScopedName: (name) => name,
        }))
            .use(used_keyframes_1.default());
    }
    parse(filename) {
        const css = fs_1.default.readFileSync(filename);
        const classes = new Map();
        const usedClasses = new Set();
        const options = { ...this.postcssOptions, from: filename };
        const { root, messages } = this.process(css.toString(), options);
        if (root) {
            const { icssExports } = icss_utils_1.extractICSS(root, false);
            Object.entries(icssExports).forEach(([key, value]) => {
                const classNames = this.convertClassNames(value.split(" "));
                this.convertClassName(key).forEach((cn) => classes.set(cn, classNames));
            });
            this.collectUsedClasses(messages, usedClasses);
        }
        return { classes, usedClasses };
    }
    process(css, options) {
        if (this.syncOk) {
            try {
                const { root, messages } = this.processor.process(css, options).sync();
                return { root: root, messages };
            }
            catch (_) {
                this.syncOk = false;
            }
        }
        const { root, messages } = sync_1.default(this.processor.process(css, options));
        return { root: root, messages };
    }
    collectUsedClasses(messages, used) {
        messages.forEach((message) => {
            if (message.type === "used-values" && message.plugin === "used-values") {
                message.usedValues.forEach((usedValue) => used.add(usedValue));
            }
            else if (message.type === "used-keyframes" &&
                message.plugin === "used-keyframes") {
                message.usedKeyframes.forEach((usedKeyframe) => used.add(usedKeyframe));
            }
        });
    }
    loadConfig() {
        try {
            const { plugins, options } = postcss_load_config_1.default.sync({}, this.settings.postcssConfigDir);
            options.map = false;
            options.stringifier = () => { };
            return { plugins, options };
        }
        catch (err) {
            return { plugins: [], options: { stringifier: () => { }, map: false } };
        }
    }
    convertClassName(className) {
        if (this.settings.camelCase === false ||
            this.settings.camelCase === "asIs") {
            return [className];
        }
        const camelCaseClassName = this.settings.camelCase === true ||
            this.settings.camelCase === "camelCase" ||
            this.settings.camelCase === "camelCaseOnly" ||
            this.settings.camelCase === "only"
            ? camelcase_1.default(className)
            : this.convertDashesToCamelCase(className);
        if (this.settings.camelCase === "camelCaseOnly" ||
            this.settings.camelCase === "dashesOnly" ||
            this.settings.camelCase === "only") {
            return [camelCaseClassName];
        }
        return [className, camelCaseClassName];
    }
    convertClassNames(classNames) {
        if (this.settings.camelCase === false ||
            this.settings.camelCase === "asIs") {
            return classNames;
        }
        const camelCaseClassNames = this.settings.camelCase === true ||
            this.settings.camelCase === "camelCase" ||
            this.settings.camelCase === "camelCaseOnly" ||
            this.settings.camelCase === "only"
            ? classNames.map((cn) => camelcase_1.default(cn))
            : classNames.map(this.convertDashesToCamelCase);
        if (this.settings.camelCase === "camelCaseOnly" ||
            this.settings.camelCase === "dashesOnly" ||
            this.settings.camelCase === "only") {
            return camelCaseClassNames;
        }
        return classNames.concat(camelCaseClassNames);
    }
    convertDashesToCamelCase(className) {
        return className.replace(/-+(\w)/g, (_, firstLetter) => firstLetter.toUpperCase());
    }
}
exports.default = Parser;
